There are all sorts of data types, but 'char' has to be created by making a string of the char you want to create and using the charAt function with an argument of 0. I believe it works very similarly to Java's charAt() function. Data types can be all sorts of things once you implement them. Also, if you assign a variable to another variable of a different type, I believe that variable will have the functions of the other variable. But if you assign a class to an int, the base memory address of the class will be that int. For example, if you have a Point with 3 arguments, you assign that to an array, and then say that point at 1 equals some number, the second attribute will be set to whatever number was after the equal sign.

There is whitespace and comments. Whitespace is the key part of Jack and comments are there to help make your code readable as long as they are descriptive but concise. However, whitespace at the beginning or end is probably ignored. There are also constants. Integer constants must be positive, while negative integers are expressions consisting of "-" and the number not including the "-" sign. Ther are also boolean constants, the constant null, and string constants. There is also this as a constant. Identifiers are also key in Jack. Without them, your Jack would be super messy, just like any other language. And without functions, you'd be doing the same thing over and over again, especially with no identifiers. There's also symbols and keywords.

In Jack, lists have a constructor that takes in 2 arguments, car and cdr. Car stores the tail of the list, while cdr is another list, forming a list with a tail of car and the rest being cdr, or null, forming a list only holding car. You can access this list recursively or sequentially. A sequential version of printing this list would be to set current to this and make that variable a List before and then while current's 'next' attribute isn't 'null', then we print the content of the tail of the list and then set current to it's next, using getNext(). We repeat.

I learned more about object-based programming. The heap is the rest of the RAM above the stack, where we store the attributes of our class. Every class that has at least one constructor should have a dispose() function to get rid of the memory used to store that object. Otherwise, we'll run out of memory, especially if we use something like a Binary Search tree which nests classes in classes. If the class is all methods/functions, then it doesn't take information and it will really just be a temporary waste to dispose the class.

I learned about object-oriented programming. All programs have to return. Constructors are supposed to create the class, which is defined using: "class {class name}{{methods}}". The third and last brackets are actual ways to define the syntax. All constructors must return 'this', the actual object. All good classes have a method called 'dispose'. All functions must have an accesor method for each type unless they want the type to be private. That's kind of a way to declare public and private between variables. And finally functions are equivalent to static methods that don't interact on the object itself.

I learned about the Jack language. A comment is either //, /* */ (block), or /** */ (API block). A Jack program is a collection of one or more classes, with one called Main. In this class, there must be a function called main. Therefore, the label that starts running first is Main.main. And, every time you do something meaningful like printing you use do. You can use Output.print(), but you have to provide the type after print in capital.